// Do not edit this file manually it is auto-generated during the build based on the .resx file for this project.
namespace System
{
    internal static partial class SR
    {
#pragma warning disable 0414
        private const string s_resourcesName = "FxResources.MockNego.SR";
#pragma warning restore 0414

#if !DEBUGRESOURCES
        internal static string Arg_RankMultiDimNotSupported {
              get { return SR.GetResourceString("Arg_RankMultiDimNotSupported", null); }
        }
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", null); }
        }
        internal static string Arg_ArrayPlusOffTooSmall {
              get { return SR.GetResourceString("Arg_ArrayPlusOffTooSmall", null); }
        }
        internal static string net_noseek {
              get { return SR.GetResourceString("net_noseek", null); }
        }
        internal static string net_mustbeuri {
              get { return SR.GetResourceString("net_mustbeuri", null); }
        }
        internal static string net_securitypackagesupport {
              get { return SR.GetResourceString("net_securitypackagesupport", null); }
        }
        internal static string net_securityprotocolnotsupported {
              get { return SR.GetResourceString("net_securityprotocolnotsupported", null); }
        }
        internal static string net_MethodNotImplementedException {
              get { return SR.GetResourceString("net_MethodNotImplementedException", null); }
        }
        internal static string net_completed_result {
              get { return SR.GetResourceString("net_completed_result", null); }
        }
        internal static string net_io_readfailure {
              get { return SR.GetResourceString("net_io_readfailure", null); }
        }
        internal static string net_io_connectionclosed {
              get { return SR.GetResourceString("net_io_connectionclosed", null); }
        }
        internal static string net_io_invalidnestedcall {
              get { return SR.GetResourceString("net_io_invalidnestedcall", null); }
        }
        internal static string net_io_invalidendcall {
              get { return SR.GetResourceString("net_io_invalidendcall", null); }
        }
        internal static string net_io_must_be_rw_stream {
              get { return SR.GetResourceString("net_io_must_be_rw_stream", null); }
        }
        internal static string net_io_header_id {
              get { return SR.GetResourceString("net_io_header_id", null); }
        }
        internal static string net_io_out_range {
              get { return SR.GetResourceString("net_io_out_range", null); }
        }
        internal static string net_io_encrypt {
              get { return SR.GetResourceString("net_io_encrypt", null); }
        }
        internal static string net_io_decrypt {
              get { return SR.GetResourceString("net_io_decrypt", null); }
        }
        internal static string net_io_read {
              get { return SR.GetResourceString("net_io_read", null); }
        }
        internal static string net_io_write {
              get { return SR.GetResourceString("net_io_write", null); }
        }
        internal static string net_io_eof {
              get { return SR.GetResourceString("net_io_eof", null); }
        }
        internal static string net_io_async_result {
              get { return SR.GetResourceString("net_io_async_result", null); }
        }
        internal static string net_ssl_io_frame {
              get { return SR.GetResourceString("net_ssl_io_frame", null); }
        }
        internal static string net_ssl_io_cert_validation {
              get { return SR.GetResourceString("net_ssl_io_cert_validation", null); }
        }
        internal static string net_ssl_io_no_server_cert {
              get { return SR.GetResourceString("net_ssl_io_no_server_cert", null); }
        }
        internal static string net_auth_bad_client_creds {
              get { return SR.GetResourceString("net_auth_bad_client_creds", null); }
        }
        internal static string net_auth_bad_client_creds_or_target_mismatch {
              get { return SR.GetResourceString("net_auth_bad_client_creds_or_target_mismatch", null); }
        }
        internal static string net_auth_context_expectation {
              get { return SR.GetResourceString("net_auth_context_expectation", null); }
        }
        internal static string net_auth_context_expectation_remote {
              get { return SR.GetResourceString("net_auth_context_expectation_remote", null); }
        }
        internal static string net_auth_supported_impl_levels {
              get { return SR.GetResourceString("net_auth_supported_impl_levels", null); }
        }
        internal static string net_auth_reauth {
              get { return SR.GetResourceString("net_auth_reauth", null); }
        }
        internal static string net_auth_noauth {
              get { return SR.GetResourceString("net_auth_noauth", null); }
        }
        internal static string net_auth_client_server {
              get { return SR.GetResourceString("net_auth_client_server", null); }
        }
        internal static string net_auth_SSPI {
              get { return SR.GetResourceString("net_auth_SSPI", null); }
        }
        internal static string net_auth_eof {
              get { return SR.GetResourceString("net_auth_eof", null); }
        }
        internal static string net_auth_alert {
              get { return SR.GetResourceString("net_auth_alert", null); }
        }
        internal static string net_auth_ignored_reauth {
              get { return SR.GetResourceString("net_auth_ignored_reauth", null); }
        }
        internal static string net_auth_message_not_encrypted {
              get { return SR.GetResourceString("net_auth_message_not_encrypted", null); }
        }
        internal static string net_auth_must_specify_extended_protection_scheme {
              get { return SR.GetResourceString("net_auth_must_specify_extended_protection_scheme", null); }
        }
        internal static string net_frame_size {
              get { return SR.GetResourceString("net_frame_size", null); }
        }
        internal static string net_frame_read_io {
              get { return SR.GetResourceString("net_frame_read_io", null); }
        }
        internal static string net_frame_read_size {
              get { return SR.GetResourceString("net_frame_read_size", null); }
        }
        internal static string net_frame_max_size {
              get { return SR.GetResourceString("net_frame_max_size", null); }
        }
        internal static string net_offset_plus_count {
              get { return SR.GetResourceString("net_offset_plus_count", null); }
        }
        internal static string net_invalid_enum {
              get { return SR.GetResourceString("net_invalid_enum", null); }
        }
        internal static string net_log_exception {
              get { return SR.GetResourceString("net_log_exception", null); }
        }
        internal static string event_EnumerateSecurityPackages {
              get { return SR.GetResourceString("event_EnumerateSecurityPackages", null); }
        }
        internal static string event_SspiPackageNotFound {
              get { return SR.GetResourceString("event_SspiPackageNotFound", null); }
        }
        internal static string event_SecurityContextInputBuffer {
              get { return SR.GetResourceString("event_SecurityContextInputBuffer", null); }
        }
        internal static string event_SecurityContextInputBuffers {
              get { return SR.GetResourceString("event_SecurityContextInputBuffers", null); }
        }
        internal static string event_SspiSelectedCipherSuite {
              get { return SR.GetResourceString("event_SspiSelectedCipherSuite", null); }
        }
        internal static string event_RemoteCertificate {
              get { return SR.GetResourceString("event_RemoteCertificate", null); }
        }
        internal static string event_LocatingPrivateKey {
              get { return SR.GetResourceString("event_LocatingPrivateKey", null); }
        }
        internal static string event_CertIsType2 {
              get { return SR.GetResourceString("event_CertIsType2", null); }
        }
        internal static string event_FoundCertInStore {
              get { return SR.GetResourceString("event_FoundCertInStore", null); }
        }
        internal static string event_NotFoundCertInStore {
              get { return SR.GetResourceString("event_NotFoundCertInStore", null); }
        }
        internal static string net_log_open_store_failed {
              get { return SR.GetResourceString("net_log_open_store_failed", null); }
        }
        internal static string event_CertificateFromDelegate {
              get { return SR.GetResourceString("event_CertificateFromDelegate", null); }
        }
        internal static string event_NoDelegateNoClientCert {
              get { return SR.GetResourceString("event_NoDelegateNoClientCert", null); }
        }
        internal static string event_NoDelegateButClientCert {
              get { return SR.GetResourceString("event_NoDelegateButClientCert", null); }
        }
        internal static string event_AttemptingRestartUsingCert {
              get { return SR.GetResourceString("event_AttemptingRestartUsingCert", null); }
        }
        internal static string event_NoIssuersTryAllCerts {
              get { return SR.GetResourceString("event_NoIssuersTryAllCerts", null); }
        }
        internal static string event_LookForMatchingCerts {
              get { return SR.GetResourceString("event_LookForMatchingCerts", null); }
        }
        internal static string event_SelectedCert {
              get { return SR.GetResourceString("event_SelectedCert", null); }
        }
        internal static string event_CertsAfterFiltering {
              get { return SR.GetResourceString("event_CertsAfterFiltering", null); }
        }
        internal static string event_FindingMatchingCerts {
              get { return SR.GetResourceString("event_FindingMatchingCerts", null); }
        }
        internal static string event_UsingCachedCredential {
              get { return SR.GetResourceString("event_UsingCachedCredential", null); }
        }
        internal static string event_RemoteCertDeclaredValid {
              get { return SR.GetResourceString("event_RemoteCertDeclaredValid", null); }
        }
        internal static string event_RemoteCertUserDeclaredInvalid {
              get { return SR.GetResourceString("event_RemoteCertUserDeclaredInvalid", null); }
        }
        internal static string event_RemoteCertHasNoErrors {
              get { return SR.GetResourceString("event_RemoteCertHasNoErrors", null); }
        }
        internal static string net_log_remote_cert_has_errors {
              get { return SR.GetResourceString("net_log_remote_cert_has_errors", null); }
        }
        internal static string net_log_remote_cert_not_available {
              get { return SR.GetResourceString("net_log_remote_cert_not_available", null); }
        }
        internal static string net_log_remote_cert_name_mismatch {
              get { return SR.GetResourceString("net_log_remote_cert_name_mismatch", null); }
        }
        internal static string event_OperationReturnedSomething {
              get { return SR.GetResourceString("event_OperationReturnedSomething", null); }
        }
        internal static string net_log_operation_failed_with_error {
              get { return SR.GetResourceString("net_log_operation_failed_with_error", null); }
        }
        internal static string SSPIInvalidHandleType {
              get { return SR.GetResourceString("SSPIInvalidHandleType", null); }
        }
        internal static string security_ExtendedProtectionPolicy_UseDifferentConstructorForNever {
              get { return SR.GetResourceString("security_ExtendedProtectionPolicy_UseDifferentConstructorForNever", null); }
        }
        internal static string security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection {
              get { return SR.GetResourceString("security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection", null); }
        }
        internal static string security_ServiceNameCollection_EmptyServiceName {
              get { return SR.GetResourceString("security_ServiceNameCollection_EmptyServiceName", null); }
        }
        internal static string InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple {
              get { return SR.GetResourceString("InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple", null); }
        }
        internal static string InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple {
              get { return SR.GetResourceString("InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple", null); }
        }
        internal static string ObjectDisposed_StreamIsClosed {
              get { return SR.GetResourceString("ObjectDisposed_StreamIsClosed", null); }
        }
        internal static string NotSupported_UnreadableStream {
              get { return SR.GetResourceString("NotSupported_UnreadableStream", null); }
        }
        internal static string NotSupported_UnwritableStream {
              get { return SR.GetResourceString("NotSupported_UnwritableStream", null); }
        }
        internal static string net_allocate_ssl_context_failed {
              get { return SR.GetResourceString("net_allocate_ssl_context_failed", null); }
        }
        internal static string net_generic_operation_failed {
              get { return SR.GetResourceString("net_generic_operation_failed", null); }
        }
        internal static string net_ssl_decrypt_failed {
              get { return SR.GetResourceString("net_ssl_decrypt_failed", null); }
        }
        internal static string net_ssl_encrypt_failed {
              get { return SR.GetResourceString("net_ssl_encrypt_failed", null); }
        }
        internal static string net_get_ssl_method_failed {
              get { return SR.GetResourceString("net_get_ssl_method_failed", null); }
        }
        internal static string net_ssl_check_private_key_failed {
              get { return SR.GetResourceString("net_ssl_check_private_key_failed", null); }
        }
        internal static string net_ssl_handshake_failed_error {
              get { return SR.GetResourceString("net_ssl_handshake_failed_error", null); }
        }
        internal static string net_ssl_read_bio_failed_error {
              get { return SR.GetResourceString("net_ssl_read_bio_failed_error", null); }
        }
        internal static string net_ssl_use_cert_failed {
              get { return SR.GetResourceString("net_ssl_use_cert_failed", null); }
        }
        internal static string net_ssl_use_private_key_failed {
              get { return SR.GetResourceString("net_ssl_use_private_key_failed", null); }
        }
        internal static string net_ssl_write_bio_failed_error {
              get { return SR.GetResourceString("net_ssl_write_bio_failed_error", null); }
        }
        internal static string net_ssl_x509Name_push_failed_error {
              get { return SR.GetResourceString("net_ssl_x509Name_push_failed_error", null); }
        }
        internal static string net_ssl_get_connection_info_failed {
              get { return SR.GetResourceString("net_ssl_get_connection_info_failed", null); }
        }
        internal static string net_ssl_get_channel_binding_token_failed {
              get { return SR.GetResourceString("net_ssl_get_channel_binding_token_failed", null); }
        }
        internal static string net_ssl_invalid_certificate {
              get { return SR.GetResourceString("net_ssl_invalid_certificate", null); }
        }
        internal static string net_gssapi_operation_failed_detailed {
              get { return SR.GetResourceString("net_gssapi_operation_failed_detailed", null); }
        }
        internal static string net_gssapi_operation_failed {
              get { return SR.GetResourceString("net_gssapi_operation_failed", null); }
        }
        internal static string net_context_establishment_failed {
              get { return SR.GetResourceString("net_context_establishment_failed", null); }
        }
        internal static string net_context_wrap_failed {
              get { return SR.GetResourceString("net_context_wrap_failed", null); }
        }
        internal static string net_context_unwrap_failed {
              get { return SR.GetResourceString("net_context_unwrap_failed", null); }
        }
        internal static string net_context_buffer_too_small {
              get { return SR.GetResourceString("net_context_buffer_too_small", null); }
        }
        internal static string net_generic_heimntlm_operation_failed {
              get { return SR.GetResourceString("net_generic_heimntlm_operation_failed", null); }
        }
#else
        internal static string Arg_RankMultiDimNotSupported {
              get { return SR.GetResourceString("Arg_RankMultiDimNotSupported", @"Only single dimensional arrays are supported for the requested action."); }
        }
        internal static string ArgumentOutOfRange_NeedNonNegNum {
              get { return SR.GetResourceString("ArgumentOutOfRange_NeedNonNegNum", @"Index is less than zero."); }
        }
        internal static string Arg_ArrayPlusOffTooSmall {
              get { return SR.GetResourceString("Arg_ArrayPlusOffTooSmall", @"Destination array is not long enough to copy all the items in the collection. Check array index and length."); }
        }
        internal static string net_noseek {
              get { return SR.GetResourceString("net_noseek", @"This stream does not support seek operations."); }
        }
        internal static string net_mustbeuri {
              get { return SR.GetResourceString("net_mustbeuri", @"The {0} parameter must represent a valid Uri (see inner exception)."); }
        }
        internal static string net_securitypackagesupport {
              get { return SR.GetResourceString("net_securitypackagesupport", @"The requested security package is not supported."); }
        }
        internal static string net_securityprotocolnotsupported {
              get { return SR.GetResourceString("net_securityprotocolnotsupported", @"The requested security protocol is not supported."); }
        }
        internal static string net_MethodNotImplementedException {
              get { return SR.GetResourceString("net_MethodNotImplementedException", @"This method is not implemented by this class."); }
        }
        internal static string net_completed_result {
              get { return SR.GetResourceString("net_completed_result", @"This operation cannot be performed on a completed asynchronous result object."); }
        }
        internal static string net_io_readfailure {
              get { return SR.GetResourceString("net_io_readfailure", @"Unable to read data from the transport connection: {0}."); }
        }
        internal static string net_io_connectionclosed {
              get { return SR.GetResourceString("net_io_connectionclosed", @"The connection was closed"); }
        }
        internal static string net_io_invalidnestedcall {
              get { return SR.GetResourceString("net_io_invalidnestedcall", @" The {0} method cannot be called when another {1} operation is pending."); }
        }
        internal static string net_io_invalidendcall {
              get { return SR.GetResourceString("net_io_invalidendcall", @"{0} can only be called once for each asynchronous operation."); }
        }
        internal static string net_io_must_be_rw_stream {
              get { return SR.GetResourceString("net_io_must_be_rw_stream", @"The stream has to be read/write."); }
        }
        internal static string net_io_header_id {
              get { return SR.GetResourceString("net_io_header_id", @"Found a wrong header field {0} read : {1}, expected : {2}."); }
        }
        internal static string net_io_out_range {
              get { return SR.GetResourceString("net_io_out_range", @"The byte count must not exceed {0} bytes for this stream type."); }
        }
        internal static string net_io_encrypt {
              get { return SR.GetResourceString("net_io_encrypt", @"The encryption operation failed, see inner exception."); }
        }
        internal static string net_io_decrypt {
              get { return SR.GetResourceString("net_io_decrypt", @"The decryption operation failed, see inner exception."); }
        }
        internal static string net_io_read {
              get { return SR.GetResourceString("net_io_read", @"The read operation failed, see inner exception."); }
        }
        internal static string net_io_write {
              get { return SR.GetResourceString("net_io_write", @"The write operation failed, see inner exception."); }
        }
        internal static string net_io_eof {
              get { return SR.GetResourceString("net_io_eof", @" Received an unexpected EOF or 0 bytes from the transport stream."); }
        }
        internal static string net_io_async_result {
              get { return SR.GetResourceString("net_io_async_result", @"The parameter: {0} is not valid. Use the object returned from corresponding Begin async call."); }
        }
        internal static string net_ssl_io_frame {
              get { return SR.GetResourceString("net_ssl_io_frame", @"The handshake failed due to an unexpected packet format."); }
        }
        internal static string net_ssl_io_cert_validation {
              get { return SR.GetResourceString("net_ssl_io_cert_validation", @"The remote certificate is invalid according to the validation procedure."); }
        }
        internal static string net_ssl_io_no_server_cert {
              get { return SR.GetResourceString("net_ssl_io_no_server_cert", @"The server mode SSL must use a certificate with the associated private key."); }
        }
        internal static string net_auth_bad_client_creds {
              get { return SR.GetResourceString("net_auth_bad_client_creds", @"The server has rejected the client credentials."); }
        }
        internal static string net_auth_bad_client_creds_or_target_mismatch {
              get { return SR.GetResourceString("net_auth_bad_client_creds_or_target_mismatch", @"Either the target name is incorrect or the server has rejected the client credentials."); }
        }
        internal static string net_auth_context_expectation {
              get { return SR.GetResourceString("net_auth_context_expectation", @"A security requirement was not fulfilled during authentication. Required: {0}, negotiated: {1}."); }
        }
        internal static string net_auth_context_expectation_remote {
              get { return SR.GetResourceString("net_auth_context_expectation_remote", @"A remote side security requirement was not fulfilled during authentication. Try increasing the ProtectionLevel and/or ImpersonationLevel."); }
        }
        internal static string net_auth_supported_impl_levels {
              get { return SR.GetResourceString("net_auth_supported_impl_levels", @"The supported values are Identification, Impersonation or Delegation."); }
        }
        internal static string net_auth_reauth {
              get { return SR.GetResourceString("net_auth_reauth", @"This operation is not allowed on a security context that has already been authenticated."); }
        }
        internal static string net_auth_noauth {
              get { return SR.GetResourceString("net_auth_noauth", @"This operation is only allowed using a successfully authenticated context."); }
        }
        internal static string net_auth_client_server {
              get { return SR.GetResourceString("net_auth_client_server", @"Once authentication is attempted as the client or server, additional authentication attempts must use the same client or server role."); }
        }
        internal static string net_auth_SSPI {
              get { return SR.GetResourceString("net_auth_SSPI", @"A call to SSPI failed, see inner exception."); }
        }
        internal static string net_auth_eof {
              get { return SR.GetResourceString("net_auth_eof", @"Authentication failed because the remote party has closed the transport stream."); }
        }
        internal static string net_auth_alert {
              get { return SR.GetResourceString("net_auth_alert", @"Authentication failed on the remote side (the stream might still be available for additional authentication attempts)."); }
        }
        internal static string net_auth_ignored_reauth {
              get { return SR.GetResourceString("net_auth_ignored_reauth", @"Re-authentication failed because the remote party continued to encrypt more than {0} bytes before answering re-authentication."); }
        }
        internal static string net_auth_message_not_encrypted {
              get { return SR.GetResourceString("net_auth_message_not_encrypted", @"Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level."); }
        }
        internal static string net_auth_must_specify_extended_protection_scheme {
              get { return SR.GetResourceString("net_auth_must_specify_extended_protection_scheme", @"An extended protection policy must specify either a custom channel binding or a custom service name collection."); }
        }
        internal static string net_frame_size {
              get { return SR.GetResourceString("net_frame_size", @"Received an invalid authentication frame. The message size is limited to {0} bytes, attempted to read {1} bytes."); }
        }
        internal static string net_frame_read_io {
              get { return SR.GetResourceString("net_frame_read_io", @"Received incomplete authentication message. Remote party has probably closed the connection."); }
        }
        internal static string net_frame_read_size {
              get { return SR.GetResourceString("net_frame_read_size", @"Cannot determine the frame size or a corrupted frame was received."); }
        }
        internal static string net_frame_max_size {
              get { return SR.GetResourceString("net_frame_max_size", @"The payload size is limited to {0}, attempted set it to {1}."); }
        }
        internal static string net_offset_plus_count {
              get { return SR.GetResourceString("net_offset_plus_count", @"Sum of offset and count cannot be greater than the length of the buffer."); }
        }
        internal static string net_invalid_enum {
              get { return SR.GetResourceString("net_invalid_enum", @"The specified value is not valid in the '{0}' enumeration."); }
        }
        internal static string net_log_exception {
              get { return SR.GetResourceString("net_log_exception", @"Exception in {0}::{1} - {2}."); }
        }
        internal static string event_EnumerateSecurityPackages {
              get { return SR.GetResourceString("event_EnumerateSecurityPackages", @"Enumerating security packages:"); }
        }
        internal static string event_SspiPackageNotFound {
              get { return SR.GetResourceString("event_SspiPackageNotFound", @"Security package '{0}' was not found."); }
        }
        internal static string event_SecurityContextInputBuffer {
              get { return SR.GetResourceString("event_SecurityContextInputBuffer", @"{0}(In-Buffer length={1}, Out-Buffer length={2}, returned code={3})."); }
        }
        internal static string event_SecurityContextInputBuffers {
              get { return SR.GetResourceString("event_SecurityContextInputBuffers", @"{0}(In-Buffers count={1}, Out-Buffer length={2}, returned code={3})."); }
        }
        internal static string event_SspiSelectedCipherSuite {
              get { return SR.GetResourceString("event_SspiSelectedCipherSuite", @"{0}(Protocol={1}, Cipher={2} {3} bit strength, Hash={4} {5} bit strength, Key Exchange={6} {7} bit strength)."); }
        }
        internal static string event_RemoteCertificate {
              get { return SR.GetResourceString("event_RemoteCertificate", @"Remote certificate: {0}."); }
        }
        internal static string event_LocatingPrivateKey {
              get { return SR.GetResourceString("event_LocatingPrivateKey", @"Locating the private key for the certificate: {0}."); }
        }
        internal static string event_CertIsType2 {
              get { return SR.GetResourceString("event_CertIsType2", @"Certificate is of type X509Certificate2 and contains the private key."); }
        }
        internal static string event_FoundCertInStore {
              get { return SR.GetResourceString("event_FoundCertInStore", @"Found the certificate in the {0} store."); }
        }
        internal static string event_NotFoundCertInStore {
              get { return SR.GetResourceString("event_NotFoundCertInStore", @"Cannot find the certificate in either the LocalMachine store or the CurrentUser store."); }
        }
        internal static string net_log_open_store_failed {
              get { return SR.GetResourceString("net_log_open_store_failed", @"Opening Certificate store {0} failed, exception: {1}."); }
        }
        internal static string event_CertificateFromDelegate {
              get { return SR.GetResourceString("event_CertificateFromDelegate", @"Got a certificate from the client delegate."); }
        }
        internal static string event_NoDelegateNoClientCert {
              get { return SR.GetResourceString("event_NoDelegateNoClientCert", @"Client delegate did not provide a certificate; and there are not other user-provided certificates. Need to attempt a session restart."); }
        }
        internal static string event_NoDelegateButClientCert {
              get { return SR.GetResourceString("event_NoDelegateButClientCert", @"Client delegate did not provide a certificate; but there are other user-provided certificates."); }
        }
        internal static string event_AttemptingRestartUsingCert {
              get { return SR.GetResourceString("event_AttemptingRestartUsingCert", @"Attempting to restart the session using the user-provided certificate: {0}."); }
        }
        internal static string event_NoIssuersTryAllCerts {
              get { return SR.GetResourceString("event_NoIssuersTryAllCerts", @"We have user-provided certificates. The server has not specified any issuers, so try all the certificates."); }
        }
        internal static string event_LookForMatchingCerts {
              get { return SR.GetResourceString("event_LookForMatchingCerts", @"We have user-provided certificates. The server has specified {0} issuer(s). Looking for certificates that match any of the issuers."); }
        }
        internal static string event_SelectedCert {
              get { return SR.GetResourceString("event_SelectedCert", @"Selected certificate: {0}."); }
        }
        internal static string event_CertsAfterFiltering {
              get { return SR.GetResourceString("event_CertsAfterFiltering", @"Left with {0} client certificates to choose from."); }
        }
        internal static string event_FindingMatchingCerts {
              get { return SR.GetResourceString("event_FindingMatchingCerts", @"Trying to find a matching certificate in the certificate store."); }
        }
        internal static string event_UsingCachedCredential {
              get { return SR.GetResourceString("event_UsingCachedCredential", @"Using the cached credential handle."); }
        }
        internal static string event_RemoteCertDeclaredValid {
              get { return SR.GetResourceString("event_RemoteCertDeclaredValid", @"Remote certificate was verified as valid by the user."); }
        }
        internal static string event_RemoteCertUserDeclaredInvalid {
              get { return SR.GetResourceString("event_RemoteCertUserDeclaredInvalid", @"Remote certificate was verified as invalid by the user."); }
        }
        internal static string event_RemoteCertHasNoErrors {
              get { return SR.GetResourceString("event_RemoteCertHasNoErrors", @"Remote certificate has no errors."); }
        }
        internal static string net_log_remote_cert_has_errors {
              get { return SR.GetResourceString("net_log_remote_cert_has_errors", @"Remote certificate has errors:"); }
        }
        internal static string net_log_remote_cert_not_available {
              get { return SR.GetResourceString("net_log_remote_cert_not_available", @"The remote server did not provide a certificate."); }
        }
        internal static string net_log_remote_cert_name_mismatch {
              get { return SR.GetResourceString("net_log_remote_cert_name_mismatch", @"Certificate name mismatch."); }
        }
        internal static string event_OperationReturnedSomething {
              get { return SR.GetResourceString("event_OperationReturnedSomething", @"{0} returned {1}."); }
        }
        internal static string net_log_operation_failed_with_error {
              get { return SR.GetResourceString("net_log_operation_failed_with_error", @"{0} failed with error {1}."); }
        }
        internal static string SSPIInvalidHandleType {
              get { return SR.GetResourceString("SSPIInvalidHandleType", @"'{0}' is not a supported handle type."); }
        }
        internal static string security_ExtendedProtectionPolicy_UseDifferentConstructorForNever {
              get { return SR.GetResourceString("security_ExtendedProtectionPolicy_UseDifferentConstructorForNever", @"To construct a policy with PolicyEnforcement.Never, the single-parameter constructor must be used."); }
        }
        internal static string security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection {
              get { return SR.GetResourceString("security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection", @"The ServiceNameCollection must contain at least one service name."); }
        }
        internal static string security_ServiceNameCollection_EmptyServiceName {
              get { return SR.GetResourceString("security_ServiceNameCollection_EmptyServiceName", @"A service name must not be null or empty."); }
        }
        internal static string InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple {
              get { return SR.GetResourceString("InvalidOperation_WrongAsyncResultOrEndReadCalledMultiple", @"Either the IAsyncResult object did not come from the corresponding async method on this type, or EndRead was called multiple times with the same IAsyncResult."); }
        }
        internal static string InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple {
              get { return SR.GetResourceString("InvalidOperation_WrongAsyncResultOrEndWriteCalledMultiple", @"Either the IAsyncResult object did not come from the corresponding async method on this type, or EndWrite was called multiple times with the same IAsyncResult."); }
        }
        internal static string ObjectDisposed_StreamIsClosed {
              get { return SR.GetResourceString("ObjectDisposed_StreamIsClosed", @"Cannot access a closed Stream."); }
        }
        internal static string NotSupported_UnreadableStream {
              get { return SR.GetResourceString("NotSupported_UnreadableStream", @"Stream does not support reading."); }
        }
        internal static string NotSupported_UnwritableStream {
              get { return SR.GetResourceString("NotSupported_UnwritableStream", @"Stream does not support writing."); }
        }
        internal static string net_allocate_ssl_context_failed {
              get { return SR.GetResourceString("net_allocate_ssl_context_failed", @"Failed to allocate SSL/TLS context, OpenSSL error - {0}."); }
        }
        internal static string net_generic_operation_failed {
              get { return SR.GetResourceString("net_generic_operation_failed", @"Operation failed with error - {0}."); }
        }
        internal static string net_ssl_decrypt_failed {
              get { return SR.GetResourceString("net_ssl_decrypt_failed", @"Decrypt failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_encrypt_failed {
              get { return SR.GetResourceString("net_ssl_encrypt_failed", @"Encrypt failed with OpenSSL error - {0}."); }
        }
        internal static string net_get_ssl_method_failed {
              get { return SR.GetResourceString("net_get_ssl_method_failed", @"Failed to get SSL method '{0}'. Ensure the OpenSSL method exists on the current system."); }
        }
        internal static string net_ssl_check_private_key_failed {
              get { return SR.GetResourceString("net_ssl_check_private_key_failed", @"SSL certificate private key check failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_handshake_failed_error {
              get { return SR.GetResourceString("net_ssl_handshake_failed_error", @"SSL Handshake failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_read_bio_failed_error {
              get { return SR.GetResourceString("net_ssl_read_bio_failed_error", @"SSL Read BIO failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_use_cert_failed {
              get { return SR.GetResourceString("net_ssl_use_cert_failed", @"Using SSL certificate failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_use_private_key_failed {
              get { return SR.GetResourceString("net_ssl_use_private_key_failed", @"Using SSL certificate private key failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_write_bio_failed_error {
              get { return SR.GetResourceString("net_ssl_write_bio_failed_error", @"SSL Write BIO failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_x509Name_push_failed_error {
              get { return SR.GetResourceString("net_ssl_x509Name_push_failed_error", @"Failed to push X509_NAME into stack."); }
        }
        internal static string net_ssl_get_connection_info_failed {
              get { return SR.GetResourceString("net_ssl_get_connection_info_failed", @"Getting SSL connection info failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_get_channel_binding_token_failed {
              get { return SR.GetResourceString("net_ssl_get_channel_binding_token_failed", @"Fetching channel binding token failed with OpenSSL error - {0}."); }
        }
        internal static string net_ssl_invalid_certificate {
              get { return SR.GetResourceString("net_ssl_invalid_certificate", @"SSL certificate returned is invalid, OpenSSL error - {0}."); }
        }
        internal static string net_gssapi_operation_failed_detailed {
              get { return SR.GetResourceString("net_gssapi_operation_failed_detailed", @"Gss api operation failed with error : {0} ({1})."); }
        }
        internal static string net_gssapi_operation_failed {
              get { return SR.GetResourceString("net_gssapi_operation_failed", @"GSSAPI operation failed with status: {0} (Minor status: {1})."); }
        }
        internal static string net_context_establishment_failed {
              get { return SR.GetResourceString("net_context_establishment_failed", @"GSSAPI security context establishment failed with status: {0} (Minor status: {1})."); }
        }
        internal static string net_context_wrap_failed {
              get { return SR.GetResourceString("net_context_wrap_failed", @"GSSAPI encryption or signing failed with status: {0} (Minor status: {1})"); }
        }
        internal static string net_context_unwrap_failed {
              get { return SR.GetResourceString("net_context_unwrap_failed", @"GSSAPI decryption or signature verification failed with status: {0} (Minor status: {1})."); }
        }
        internal static string net_context_buffer_too_small {
              get { return SR.GetResourceString("net_context_buffer_too_small", @"Insufficient buffer space. Required: {0} Actual: {1}."); }
        }
        internal static string net_generic_heimntlm_operation_failed {
              get { return SR.GetResourceString("net_generic_heimntlm_operation_failed", @"Heimntlm operation failed with status: {0})"); }
        }

#endif
        internal static Type ResourceType {
              get { return typeof(FxResources.MockNego.SR); }
        }
    }
}
namespace FxResources.MockNego
{
    // The type of this class is used to create the ResourceManager instance as the type name matches the name of the embedded resources file
    internal static class SR
    {
    }
}
